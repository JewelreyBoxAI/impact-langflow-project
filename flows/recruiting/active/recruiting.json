{
  "data": {
    "edges": [
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-30L4Y",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_data",
            "id": "PythonCode-FtKPK",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatInput-30L4Y{œdataTypeœ:œChatInputœ,œidœ:œChatInput-30L4Yœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-PythonCode-FtKPK{œfieldNameœ:œinput_dataœ,œidœ:œPythonCode-FtKPKœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-30L4Y",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-30L4Yœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "PythonCode-FtKPK",
        "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œPythonCode-FtKPKœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "PythonCode",
            "id": "PythonCode-FtKPK",
            "name": "text_output",
            "output_types": [
              "Text"
            ]
          },
          "targetHandle": {
            "fieldName": "body",
            "id": "HTTPTool-hZo6C",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-PythonCode-FtKPK{œdataTypeœ:œPythonCodeœ,œidœ:œPythonCode-FtKPKœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œTextœ]}-HTTPTool-hZo6C{œfieldNameœ:œbodyœ,œidœ:œHTTPTool-hZo6Cœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "PythonCode-FtKPK",
        "sourceHandle": "{œdataTypeœ:œPythonCodeœ,œidœ:œPythonCode-FtKPKœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œTextœ]}",
        "target": "HTTPTool-hZo6C",
        "targetHandle": "{œfieldNameœ:œbodyœ,œidœ:œHTTPTool-hZo6Cœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "HTTPTool",
            "id": "HTTPTool-hZo6C",
            "name": "response",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "prospect_data",
            "id": "Prompt-nW48r",
            "inputTypes": [
              "Message",
              "Text",
              "Data"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-HTTPTool-hZo6C{œdataTypeœ:œHTTPToolœ,œidœ:œHTTPTool-hZo6Cœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}-Prompt-nW48r{œfieldNameœ:œprospect_dataœ,œidœ:œPrompt-nW48rœ,œinputTypesœ:[œMessageœ,œTextœ,œDataœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "HTTPTool-hZo6C",
        "sourceHandle": "{œdataTypeœ:œHTTPToolœ,œidœ:œHTTPTool-hZo6Cœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}",
        "target": "Prompt-nW48r",
        "targetHandle": "{œfieldNameœ:œprospect_dataœ,œidœ:œPrompt-nW48rœ,œinputTypesœ:[œMessageœ,œTextœ,œDataœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-nW48r",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "system_message",
            "id": "OpenAIModel-0ayLw",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Prompt-nW48r{œdataTypeœ:œPromptœ,œidœ:œPrompt-nW48rœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-0ayLw{œfieldNameœ:œsystem_messageœ,œidœ:œOpenAIModel-0ayLwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Prompt-nW48r",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-nW48rœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OpenAIModel-0ayLw",
        "targetHandle": "{œfieldNameœ:œsystem_messageœ,œidœ:œOpenAIModel-0ayLwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-30L4Y",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-0ayLw",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-ChatInput-30L4Y{œdataTypeœ:œChatInputœ,œidœ:œChatInput-30L4Yœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-0ayLw{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-0ayLwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "ChatInput-30L4Y",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-30L4Yœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OpenAIModel-0ayLw",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-0ayLwœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-0ayLw",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "llm_response",
            "id": "Prompt-wkQ3q",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-OpenAIModel-0ayLw{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-0ayLwœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-Prompt-wkQ3q{œfieldNameœ:œllm_responseœ,œidœ:œPrompt-wkQ3qœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "OpenAIModel-0ayLw",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-0ayLwœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "Prompt-wkQ3q",
        "targetHandle": "{œfieldNameœ:œllm_responseœ,œidœ:œPrompt-wkQ3qœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-wkQ3q",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "OpenAIModel-831ND",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-Prompt-wkQ3q{œdataTypeœ:œPromptœ,œidœ:œPrompt-wkQ3qœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-OpenAIModel-831ND{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-831NDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "Prompt-wkQ3q",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-wkQ3qœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "target": "OpenAIModel-831ND",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œOpenAIModel-831NDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-831ND",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "body",
            "id": "HTTPTool-VCYVn",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-OpenAIModel-831ND{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-831NDœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-HTTPTool-VCYVn{œfieldNameœ:œbodyœ,œidœ:œHTTPTool-VCYVnœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "OpenAIModel-831ND",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-831NDœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "HTTPTool-VCYVn",
        "targetHandle": "{œfieldNameœ:œbodyœ,œidœ:œHTTPTool-VCYVnœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-831ND",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "body",
            "id": "HTTPTool-4QWRT",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-OpenAIModel-831ND{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-831NDœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-HTTPTool-4QWRT{œfieldNameœ:œbodyœ,œidœ:œHTTPTool-4QWRTœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "OpenAIModel-831ND",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-831NDœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "HTTPTool-4QWRT",
        "targetHandle": "{œfieldNameœ:œbodyœ,œidœ:œHTTPTool-4QWRTœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "OpenAIModel",
            "id": "OpenAIModel-831ND",
            "name": "text_output",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "body",
            "id": "HTTPTool-eakgG",
            "inputTypes": [
              "Message",
              "Text"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-OpenAIModel-831ND{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-831NDœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}-HTTPTool-eakgG{œfieldNameœ:œbodyœ,œidœ:œHTTPTool-eakgGœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "OpenAIModel-831ND",
        "sourceHandle": "{œdataTypeœ:œOpenAIModelœ,œidœ:œOpenAIModel-831NDœ,œnameœ:œtext_outputœ,œoutput_typesœ:[œMessageœ]}",
        "target": "HTTPTool-eakgG",
        "targetHandle": "{œfieldNameœ:œbodyœ,œidœ:œHTTPTool-eakgGœ,œinputTypesœ:[œMessageœ,œTextœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "HTTPTool",
            "id": "HTTPTool-VCYVn",
            "name": "response",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "input_data",
            "id": "PostgreSQL-rgIhF",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-HTTPTool-VCYVn{œdataTypeœ:œHTTPToolœ,œidœ:œHTTPTool-VCYVnœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}-PostgreSQL-rgIhF{œfieldNameœ:œinput_dataœ,œidœ:œPostgreSQL-rgIhFœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "HTTPTool-VCYVn",
        "sourceHandle": "{œdataTypeœ:œHTTPToolœ,œidœ:œHTTPTool-VCYVnœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}",
        "target": "PostgreSQL-rgIhF",
        "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œPostgreSQL-rgIhFœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "HTTPTool",
            "id": "HTTPTool-4QWRT",
            "name": "response",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "input_data",
            "id": "PostgreSQL-rgIhF",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-HTTPTool-4QWRT{œdataTypeœ:œHTTPToolœ,œidœ:œHTTPTool-4QWRTœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}-PostgreSQL-rgIhF{œfieldNameœ:œinput_dataœ,œidœ:œPostgreSQL-rgIhFœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "HTTPTool-4QWRT",
        "sourceHandle": "{œdataTypeœ:œHTTPToolœ,œidœ:œHTTPTool-4QWRTœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}",
        "target": "PostgreSQL-rgIhF",
        "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œPostgreSQL-rgIhFœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "HTTPTool",
            "id": "HTTPTool-eakgG",
            "name": "response",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "input_data",
            "id": "PostgreSQL-rgIhF",
            "inputTypes": [
              "Message",
              "Data"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-HTTPTool-eakgG{œdataTypeœ:œHTTPToolœ,œidœ:œHTTPTool-eakgGœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}-PostgreSQL-rgIhF{œfieldNameœ:œinput_dataœ,œidœ:œPostgreSQL-rgIhFœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "HTTPTool-eakgG",
        "sourceHandle": "{œdataTypeœ:œHTTPToolœ,œidœ:œHTTPTool-eakgGœ,œnameœ:œresponseœ,œoutput_typesœ:[œDataœ]}",
        "target": "PostgreSQL-rgIhF",
        "targetHandle": "{œfieldNameœ:œinput_dataœ,œidœ:œPostgreSQL-rgIhFœ,œinputTypesœ:[œMessageœ,œDataœ],œtypeœ:œstrœ}"
      },
      {
        "animated": false,
        "className": "",
        "data": {
          "sourceHandle": {
            "dataType": "PostgreSQL",
            "id": "PostgreSQL-rgIhF",
            "name": "result",
            "output_types": [
              "Data"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-pLrGd",
            "inputTypes": [
              "Data",
              "DataFrame",
              "Message"
            ],
            "type": "str"
          }
        },
        "id": "reactflow__edge-PostgreSQL-rgIhF{œdataTypeœ:œPostgreSQLœ,œidœ:œPostgreSQL-rgIhFœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}-ChatOutput-pLrGd{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-pLrGdœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}",
        "selected": false,
        "source": "PostgreSQL-rgIhF",
        "sourceHandle": "{œdataTypeœ:œPostgreSQLœ,œidœ:œPostgreSQL-rgIhFœ,œnameœ:œresultœ,œoutput_typesœ:[œDataœ]}",
        "target": "ChatOutput-pLrGd",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-pLrGdœ,œinputTypesœ:[œDataœ,œDataFrameœ,œMessageœ],œtypeœ:œstrœ}"
      }
    ],
    "nodes": [
      {
        "data": {
          "id": "ChatInput-30L4Y",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Get chat inputs from the Playground - supports CSV file upload and direct prospect data entry.",
            "display_name": "Chat Input",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.0.19.post2",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "files": {
                "_input_type": "FileInput",
                "advanced": false,
                "display_name": "Files",
                "dynamic": false,
                "fileTypes": [
                  "csv",
                  "txt",
                  "xlsx"
                ],
                "file_path": "",
                "info": "CSV files containing prospect data to process.",
                "list": true,
                "name": "files",
                "placeholder": "",
                "required": false,
                "show": true,
                "temp_file": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "file",
                "value": ""
              },
              "input_value": {
                "_input_type": "MultilineInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as input.",
                "input_types": [],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "input_value",
                "placeholder": "Upload CSV or enter prospect data",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "User"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Recruiter"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "type": "ChatInput"
        },
        "dragging": false,
        "height": 284,
        "id": "ChatInput-30L4Y",
        "measured": {
          "height": 284,
          "width": 320
        },
        "position": {
          "x": 100,
          "y": 200
        },
        "positionAbsolute": {
          "x": 100,
          "y": 200
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "id": "PythonCode-FtKPK",
          "node": {
            "base_classes": [
              "Text"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Execute Python code for data validation and CSV processing.",
            "display_name": "Data Validation",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_data",
              "code"
            ],
            "frozen": false,
            "icon": "Code",
            "legacy": false,
            "lf_version": "1.0.19.post2",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Text",
                "method": "run_code",
                "name": "text_output",
                "selected": "Text",
                "tool_mode": true,
                "types": [
                  "Text"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "code": {
                "_input_type": "CodeInput",
                "advanced": false,
                "display_name": "Python Code",
                "dynamic": false,
                "info": "Python code for data validation and CSV processing.",
                "list": false,
                "name": "code",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "import pandas as pd\nimport re\nimport json\nfrom io import StringIO\nimport html\n\ndef sanitize_input(data):\n    \"\"\"Sanitize input to prevent code injection\"\"\"\n    if isinstance(data, str):\n        # HTML escape and remove potentially dangerous characters\n        data = html.escape(data)\n        # Remove potentially dangerous patterns\n        dangerous_patterns = [\n            r'__import__', r'exec\\s*\\(', r'eval\\s*\\(', r'compile\\s*\\(',\n            r'subprocess', r'os\\.system', r'open\\s*\\(.*[\"\\']w',\n            r'<script', r'javascript:', r'vbscript:', r'data:',\n            r'\\\\x[0-9a-fA-F]{2}', r'\\\\u[0-9a-fA-F]{4}'\n        ]\n        for pattern in dangerous_patterns:\n            data = re.sub(pattern, '', data, flags=re.IGNORECASE)\n    return data\n\ndef validate_prospect_data(input_data):\n    \"\"\"Validate and process prospect data from CSV or direct input\"\"\"\n    # Convert Message object to string if needed\n    if hasattr(input_data, 'text'):\n        input_data = input_data.text\n    elif hasattr(input_data, 'content'):\n        input_data = input_data.content\n    elif not isinstance(input_data, str):\n        input_data = str(input_data)\n    \n    # Sanitize input to prevent code injection\n    input_data = sanitize_input(input_data)\n    \n    # Validate input length (prevent DoS)\n    if len(input_data) > 100000:  # 100KB limit\n        return json.dumps({'error': 'Input too large', 'status': 'error'})\n        \n    validated_data = []\n    \n    try:\n        # Try to parse as CSV first\n        if ',' in input_data and ('\\n' in input_data or '\\r' in input_data):\n            # Validate CSV structure before parsing\n            lines = input_data.split('\\n')\n            if len(lines) > 1000:  # Limit rows\n                return json.dumps({'error': 'Too many rows', 'status': 'error'})\n            \n            df = pd.read_csv(StringIO(input_data), nrows=1000)\n            data = df.to_dict('records')\n        else:\n            # Try to parse as JSON with size limits\n            if input_data.startswith('[') or input_data.startswith('{'):\n                parsed_data = json.loads(input_data)\n                if isinstance(parsed_data, list) and len(parsed_data) > 1000:\n                    return json.dumps({'error': 'Too many records', 'status': 'error'})\n                data = parsed_data if isinstance(parsed_data, list) else [parsed_data]\n            else:\n                data = [{'raw_input': input_data}]\n    except (json.JSONDecodeError, pd.errors.ParserError) as e:\n        # Fallback: treat as single prospect entry if parsing fails\n        data = [{'raw_input': input_data}]\n    except Exception as e:\n        return json.dumps({'error': 'Invalid input format', 'status': 'error'})\n    \n    for record in data[:100]:  # Limit processing to 100 records\n        # Sanitize all record values\n        record = {k: sanitize_input(v) if isinstance(v, str) else v for k, v in record.items()}\n        \n        # Extract fields from raw input if needed\n        if 'raw_input' in record:\n            raw = record['raw_input']\n            # Validate raw input length\n            if len(raw) > 1000:\n                continue\n                \n            # Simple extraction patterns with validation\n            email_match = re.search(r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}', raw)\n            phone_match = re.search(r'\\+?1?[-.]?\\(?([0-9]{3})\\)?[-.]?([0-9]{3})[-.]?([0-9]{4})', raw)\n            \n            if email_match:\n                email = email_match.group()\n                # Validate email length and format\n                if len(email) <= 254 and '@' in email:\n                    record['email'] = email\n            if phone_match:\n                record['phone'] = phone_match.group()\n            \n            # Extract name (assume first part before email/phone)\n            name_parts = raw.split(',')[0] if ',' in raw else raw.split()[0] if ' ' in raw else 'Unknown'\n            # Validate and limit name length\n            if len(name_parts) <= 100:\n                record['name'] = name_parts\n        \n        # Validate required fields and sanitize\n        if (record.get('email') and record.get('phone') and record.get('name') and \n            len(record['name']) <= 100 and len(record['email']) <= 254):\n            \n            # Clean and validate phone number\n            phone = re.sub(r'\\D', '', record['phone'])\n            if 10 <= len(phone) <= 15:  # Valid phone length\n                record['phone'] = phone\n                record['company'] = (record.get('company', 'Unknown') or 'Unknown')[:100]\n                record['license_number'] = (record.get('license_number', '') or '')[:50]\n                record['license_type'] = (record.get('license_type', 'Sales Associate') or 'Sales Associate')[:50]\n                validated_data.append(record)\n    \n    result = {\n        'validated_prospects': validated_data,\n        'count': len(validated_data),\n        'status': 'success' if validated_data else 'no_valid_data'\n    }\n    \n    return json.dumps(result)\n\n# Execute validation with error handling\ntry:\n    result = validate_prospect_data(input_data)\n    print(result)\nexcept Exception as e:\n    print(json.dumps({'error': 'Validation failed', 'status': 'error'}))"
              },
              "input_data": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input Data",
                "dynamic": false,
                "info": "Prospect data from ChatInput to validate and process",
                "input_types": [
                  "Message",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "name": "input_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              }
            },
            "tool_mode": false
          },
          "type": "PythonCode"
        },
        "dragging": false,
        "height": 300,
        "id": "PythonCode-FtKPK",
        "measured": {
          "height": 300,
          "width": 320
        },
        "position": {
          "x": 500,
          "y": 200
        },
        "positionAbsolute": {
          "x": 500,
          "y": 200
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "id": "HTTPTool-hZo6C",
          "node": {
            "base_classes": [
              "Tool"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "HTTP tool for Zoho MCP deduplication operations.",
            "display_name": "Zoho Dedupe MCP",
            "documentation": "",
            "edited": false,
            "field_order": [
              "method",
              "url",
              "headers",
              "body",
              "timeout"
            ],
            "frozen": false,
            "icon": "Globe",
            "legacy": false,
            "lf_version": "1.0.19.post2",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Response",
                "method": "make_request",
                "name": "response",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "body": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Request Body",
                "dynamic": false,
                "info": "JSON request body with prospect data",
                "input_types": [
                  "Message",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "name": "body",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "headers": {
                "_input_type": "DictInput",
                "advanced": false,
                "display_name": "Headers",
                "dynamic": false,
                "info": "HTTP headers",
                "list": false,
                "name": "headers",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "dict",
                "value": {
                  "Content-Type": "application/json"
                }
              },
              "method": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "display_name": "Method",
                "dynamic": false,
                "info": "HTTP method to use",
                "name": "method",
                "options": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "PATCH"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "POST"
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "Request timeout in seconds",
                "list": false,
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 30
              },
              "url": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "URL",
                "dynamic": false,
                "info": "Zoho MCP endpoint URL",
                "list": false,
                "name": "url",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "http://localhost:3001/mcp/zoho/dedupe"
              }
            },
            "tool_mode": false
          },
          "type": "HTTPTool"
        },
        "dragging": false,
        "height": 300,
        "id": "HTTPTool-hZo6C",
        "measured": {
          "height": 300,
          "width": 320
        },
        "position": {
          "x": 883.4947183098593,
          "y": 174.325117370892
        },
        "positionAbsolute": {
          "x": 900,
          "y": 200
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "id": "Prompt-nW48r",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {
              "template": [
                "prospect_data",
                "context"
              ]
            },
            "description": "System prompt for Impact Realty recruiter identity and memory context.",
            "display_name": "Impact Realty Recruiter Prompt",
            "documentation": "",
            "edited": false,
            "field_order": [
              "template"
            ],
            "frozen": false,
            "icon": "prompts",
            "legacy": false,
            "lf_version": "1.0.19.post2",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "name": "prompt",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "context": {
                "advanced": false,
                "display_name": "context",
                "dynamic": false,
                "field_type": "str",
                "info": "Retrieved context from previous interactions.",
                "input_types": [
                  "Message",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "context",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "prospect_data": {
                "advanced": false,
                "display_name": "prospect_data",
                "dynamic": false,
                "field_type": "str",
                "info": "Current prospect information.",
                "input_types": [
                  "Message",
                  "Text",
                  "Data"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "prospect_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "template": {
                "_input_type": "PromptInput",
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "System prompt template for Impact Realty recruiter identity.",
                "list": false,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "prompt",
                "value": "You are a professional recruiter with Impact Realty, Florida's premier luxury real estate brokerage. Your mission is to identify and attract top-performing real estate professionals to join our elite team.\n\n## Your Identity:\n- Professional Recruiter at Impact Realty\n- Expertise: Luxury real estate, high-end residential, commercial properties\n- Known for: Building genuine relationships, understanding agent potential, results-oriented approach\n- Communication: Professional yet personable, direct but empathetic, focused on mutual success\n\n## Impact Realty Value Proposition:\n- Leading luxury brokerage in Florida\n- Cutting-edge technology and marketing support\n- Competitive commission structures and bonus programs\n- Comprehensive training and mentorship programs\n- Strong brand recognition and market presence\n- Collaborative, success-driven culture\n\n## Context from Previous Interactions:\n{context}\n\n## Current Prospect Data:\n{prospect_data}\n\n## Your Mission:\nPersonalize outreach based on the prospect's current license status, experience level, and market focus. Present compelling opportunities that align with their career goals and highlight Impact Realty's advantages. Always maintain professional boundaries while being genuinely helpful.\n\n## Response Guidelines:\n1. Acknowledge their current license status and experience\n2. Present relevant Impact Realty opportunities\n3. Highlight specific benefits that match their profile\n4. Suggest next steps (brief call, meeting, or information session)\n5. Provide clear contact information\n6. Be concise but thorough (2-3 sentences max for SMS, more detailed for email)\n7. Always include compliance with Florida real estate regulations"
              }
            },
            "tool_mode": false
          },
          "type": "Prompt"
        },
        "dragging": false,
        "height": 400,
        "id": "Prompt-nW48r",
        "measured": {
          "height": 400,
          "width": 320
        },
        "position": {
          "x": 1300,
          "y": 200
        },
        "positionAbsolute": {
          "x": 1300,
          "y": 200
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "id": "OpenAIModel-0ayLw",
          "node": {
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Generates text using OpenAI LLMs for intelligent recruiting decisions and message generation.",
            "display_name": "Main Recruiter LLM",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "system_message",
              "model_name",
              "api_key",
              "temperature",
              "max_tokens"
            ],
            "frozen": false,
            "icon": "OpenAI",
            "legacy": false,
            "lf_version": "1.0.19.post2",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Text Response",
                "method": "invoke",
                "name": "text_output",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input Message",
                "dynamic": false,
                "info": "User input for generating recruitment messages.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate.",
                "list": false,
                "name": "max_tokens",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 1000
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "display_name": "Model Name",
                "dynamic": false,
                "info": "OpenAI model to use for recruiting analysis.",
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4o-mini"
              },
              "system_message": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "System Message",
                "dynamic": false,
                "info": "System message with recruiter identity and instructions.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "system_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": false,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "Controls randomness in responses.",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.3
              }
            },
            "tool_mode": false
          },
          "type": "OpenAIModel"
        },
        "dragging": false,
        "height": 400,
        "id": "OpenAIModel-0ayLw",
        "measured": {
          "height": 400,
          "width": 320
        },
        "position": {
          "x": 1700,
          "y": 200
        },
        "positionAbsolute": {
          "x": 1700,
          "y": 200
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "id": "Prompt-wkQ3q",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {
              "template": [
                "llm_response"
              ]
            },
            "description": "Routes outreach based on LLM decision - SMS, Email, or Calendar scheduling.",
            "display_name": "Outreach Router",
            "documentation": "",
            "edited": false,
            "field_order": [
              "template"
            ],
            "frozen": false,
            "icon": "prompts",
            "legacy": false,
            "lf_version": "1.0.19.post2",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Routing Decision",
                "method": "build_prompt",
                "name": "prompt",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "llm_response": {
                "advanced": false,
                "display_name": "llm_response",
                "dynamic": false,
                "field_type": "str",
                "info": "LLM generated response to route.",
                "input_types": [
                  "Message",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "llm_response",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "template": {
                "_input_type": "PromptInput",
                "advanced": false,
                "display_name": "Template",
                "dynamic": false,
                "info": "Outreach routing logic prompt.",
                "list": false,
                "name": "template",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "type": "prompt",
                "value": "Based on the LLM response, determine the appropriate outreach channel and generate the specific message:\n\nLLM Response:\n{llm_response}\n\nRouting Rules:\n1. SMS: For initial contact, quick follow-ups, brief messages (under 160 chars)\n2. Email: For detailed information, formal introductions, document sharing\n3. Calendar: For scheduling meetings, interviews, or information sessions\n\nOutput a JSON with this structure:\n{{\n  \"channel\": \"sms|email|calendar\",\n  \"message\": \"actual message content\",\n  \"subject\": \"email subject (if email)\",\n  \"priority\": \"high|medium|low\",\n  \"follow_up_days\": 3\n}}\n\nEnsure compliance with real estate communication regulations and professional standards."
              }
            },
            "tool_mode": false
          },
          "type": "Prompt"
        },
        "dragging": false,
        "height": 350,
        "id": "Prompt-wkQ3q",
        "measured": {
          "height": 350,
          "width": 320
        },
        "position": {
          "x": 2100,
          "y": 200
        },
        "positionAbsolute": {
          "x": 2100,
          "y": 200
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "id": "OpenAIModel-831ND",
          "node": {
            "base_classes": [
              "LanguageModel",
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "OpenAI model for outreach routing decisions.",
            "display_name": "Router LLM",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "system_message",
              "model_name",
              "api_key",
              "temperature",
              "max_tokens"
            ],
            "frozen": false,
            "icon": "OpenAI",
            "legacy": false,
            "lf_version": "1.0.19.post2",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Routing Response",
                "method": "invoke",
                "name": "text_output",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "api_key": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "OpenAI API Key",
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "input_types": [],
                "load_from_db": false,
                "name": "api_key",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input Message",
                "dynamic": false,
                "info": "Routing prompt input.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "max_tokens": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Max Tokens",
                "dynamic": false,
                "info": "The maximum number of tokens to generate.",
                "list": false,
                "name": "max_tokens",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 500
              },
              "model_name": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": true,
                "display_name": "Model Name",
                "dynamic": false,
                "info": "OpenAI model for routing decisions.",
                "name": "model_name",
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "gpt-4o-mini"
              },
              "system_message": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "System Message",
                "dynamic": false,
                "info": "System message for routing logic.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "system_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "temperature": {
                "_input_type": "SliderInput",
                "advanced": false,
                "display_name": "Temperature",
                "dynamic": false,
                "info": "Controls randomness in routing decisions.",
                "name": "temperature",
                "placeholder": "",
                "range_spec": {
                  "max": 1,
                  "min": 0,
                  "step": 0.01,
                  "step_type": "float"
                },
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "type": "slider",
                "value": 0.1
              }
            },
            "tool_mode": false
          },
          "type": "OpenAIModel"
        },
        "dragging": false,
        "height": 400,
        "id": "OpenAIModel-831ND",
        "measured": {
          "height": 400,
          "width": 320
        },
        "position": {
          "x": 2500,
          "y": 200
        },
        "positionAbsolute": {
          "x": 2500,
          "y": 200
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "id": "HTTPTool-VCYVn",
          "node": {
            "base_classes": [
              "Tool"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "HTTP tool for SalesMsg SMS outreach integration.",
            "display_name": "SalesMsg SMS",
            "documentation": "",
            "edited": false,
            "field_order": [
              "method",
              "url",
              "headers",
              "body",
              "timeout"
            ],
            "frozen": false,
            "icon": "MessageSquare",
            "legacy": false,
            "lf_version": "1.0.19.post2",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "SMS Response",
                "method": "make_request",
                "name": "response",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "body": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Message Body",
                "dynamic": false,
                "info": "SMS message JSON payload",
                "input_types": [
                  "Message",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "name": "body",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "headers": {
                "_input_type": "DictInput",
                "advanced": false,
                "display_name": "Headers",
                "dynamic": false,
                "info": "HTTP headers including SalesMsg authorization",
                "list": false,
                "name": "headers",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "dict",
                "value": {
                  "Authorization": "Bearer {SALESMSG-API-TOKEN}",
                  "Content-Type": "application/json"
                }
              },
              "method": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "display_name": "Method",
                "dynamic": false,
                "info": "HTTP method to use",
                "name": "method",
                "options": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "PATCH"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "POST"
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "Request timeout in seconds",
                "list": false,
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 30
              },
              "url": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "URL",
                "dynamic": false,
                "info": "SalesMsg API endpoint",
                "list": false,
                "name": "url",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "https://api.salesmsg.com/v1/messages"
              }
            },
            "tool_mode": false
          },
          "type": "HTTPTool"
        },
        "dragging": false,
        "height": 300,
        "id": "HTTPTool-VCYVn",
        "measured": {
          "height": 300,
          "width": 320
        },
        "position": {
          "x": 2934.8444835680752,
          "y": 164.18720657276995
        },
        "positionAbsolute": {
          "x": 2900,
          "y": 100
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "id": "HTTPTool-4QWRT",
          "node": {
            "base_classes": [
              "Tool"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "HTTP tool for Gmail API email outreach integration.",
            "display_name": "Gmail Email",
            "documentation": "",
            "edited": false,
            "field_order": [
              "method",
              "url",
              "headers",
              "body",
              "timeout"
            ],
            "frozen": false,
            "icon": "Mail",
            "legacy": false,
            "lf_version": "1.0.19.post2",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Email Response",
                "method": "make_request",
                "name": "response",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "body": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Email Body",
                "dynamic": false,
                "info": "Email message JSON payload",
                "input_types": [
                  "Message",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "name": "body",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "headers": {
                "_input_type": "DictInput",
                "advanced": false,
                "display_name": "Headers",
                "dynamic": false,
                "info": "HTTP headers including Gmail OAuth token",
                "list": false,
                "name": "headers",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "dict",
                "value": {
                  "Authorization": "Bearer {GMAIL-ACCESS-TOKEN}",
                  "Content-Type": "application/json"
                }
              },
              "method": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "display_name": "Method",
                "dynamic": false,
                "info": "HTTP method to use",
                "name": "method",
                "options": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "PATCH"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "POST"
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "Request timeout in seconds",
                "list": false,
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 30
              },
              "url": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "URL",
                "dynamic": false,
                "info": "Gmail API endpoint",
                "list": false,
                "name": "url",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "https://gmail.googleapis.com/gmail/v1/users/me/messages/send"
              }
            },
            "tool_mode": false
          },
          "type": "HTTPTool"
        },
        "dragging": false,
        "height": 300,
        "id": "HTTPTool-4QWRT",
        "measured": {
          "height": 300,
          "width": 320
        },
        "position": {
          "x": 2929.3427230046955,
          "y": 725.0880281690141
        },
        "positionAbsolute": {
          "x": 2900,
          "y": 450
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "id": "HTTPTool-eakgG",
          "node": {
            "base_classes": [
              "Tool"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "HTTP tool for Zoho Calendar MCP scheduling integration.",
            "display_name": "Zoho Calendar",
            "documentation": "",
            "edited": false,
            "field_order": [
              "method",
              "url",
              "headers",
              "body",
              "timeout"
            ],
            "frozen": false,
            "icon": "Calendar",
            "legacy": false,
            "lf_version": "1.0.19.post2",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Calendar Response",
                "method": "make_request",
                "name": "response",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "body": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Scheduling Body",
                "dynamic": false,
                "info": "Calendar scheduling JSON payload",
                "input_types": [
                  "Message",
                  "Text"
                ],
                "list": false,
                "load_from_db": false,
                "name": "body",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "headers": {
                "_input_type": "DictInput",
                "advanced": false,
                "display_name": "Headers",
                "dynamic": false,
                "info": "HTTP headers including Zoho authorization",
                "list": false,
                "name": "headers",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "type": "dict",
                "value": {
                  "Content-Type": "application/json"
                }
              },
              "method": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "display_name": "Method",
                "dynamic": false,
                "info": "HTTP method to use",
                "name": "method",
                "options": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE",
                  "PATCH"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "POST"
              },
              "timeout": {
                "_input_type": "IntInput",
                "advanced": true,
                "display_name": "Timeout",
                "dynamic": false,
                "info": "Request timeout in seconds",
                "list": false,
                "name": "timeout",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "int",
                "value": 30
              },
              "url": {
                "_input_type": "StrInput",
                "advanced": false,
                "display_name": "URL",
                "dynamic": false,
                "info": "Zoho Calendar MCP endpoint",
                "list": false,
                "name": "url",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": "http://localhost:3001/mcp/zoho/calendar/schedule"
              }
            },
            "tool_mode": false
          },
          "type": "HTTPTool"
        },
        "dragging": false,
        "height": 300,
        "id": "HTTPTool-eakgG",
        "measured": {
          "height": 300,
          "width": 320
        },
        "position": {
          "x": 2920.173122065728,
          "y": 1353.8438967136153
        },
        "positionAbsolute": {
          "x": 2900,
          "y": 800
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "id": "PostgreSQL-rgIhF",
          "node": {
            "base_classes": [
              "Data"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "PostgreSQL database connection for prospect data persistence and interaction logging.",
            "display_name": "PostgreSQL Persistence",
            "documentation": "",
            "edited": false,
            "field_order": [
              "connection_string",
              "query",
              "input_data"
            ],
            "frozen": false,
            "icon": "Database",
            "legacy": false,
            "lf_version": "1.0.19.post2",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Query Result",
                "method": "execute_query",
                "name": "result",
                "selected": "Data",
                "tool_mode": true,
                "types": [
                  "Data"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "connection_string": {
                "_input_type": "SecretStrInput",
                "advanced": false,
                "display_name": "Connection String",
                "dynamic": false,
                "info": "PostgreSQL connection string",
                "input_types": [],
                "load_from_db": false,
                "name": "connection_string",
                "password": true,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "str",
                "value": ""
              },
              "input_data": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Input Data",
                "dynamic": false,
                "info": "Data to persist in database",
                "input_types": [
                  "Message",
                  "Data"
                ],
                "list": false,
                "load_from_db": false,
                "name": "input_data",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "query": {
                "_input_type": "CodeInput",
                "advanced": false,
                "display_name": "SQL Query",
                "dynamic": false,
                "info": "SQL query for data persistence",
                "list": false,
                "name": "query",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "INSERT INTO recruiting_interactions (prospect_name, prospect_email, prospect_phone, channel, message_content, response_status, created_at, updated_at) VALUES (%(name)s, %(email)s, %(phone)s, %(channel)s, %(message)s, 'sent', NOW(), NOW()) ON CONFLICT (prospect_email) DO UPDATE SET message_content = EXCLUDED.message_content, channel = EXCLUDED.channel, updated_at = NOW();"
              }
            },
            "tool_mode": false
          },
          "type": "PostgreSQL"
        },
        "dragging": false,
        "height": 350,
        "id": "PostgreSQL-rgIhF",
        "measured": {
          "height": 350,
          "width": 320
        },
        "position": {
          "x": 3300,
          "y": 400
        },
        "positionAbsolute": {
          "x": 3300,
          "y": 400
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "description": "Display a chat message in the Playground.",
          "display_name": "Recruiting Flow Result",
          "id": "ChatOutput-pLrGd",
          "node": {
            "base_classes": [
              "Message"
            ],
            "beta": false,
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Display structured JSON output for FastAPI UI integration and final results.",
            "display_name": "Recruiting Flow Result",
            "documentation": "",
            "edited": false,
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id"
            ],
            "frozen": false,
            "icon": "MessagesSquare",
            "legacy": false,
            "lf_version": "1.0.19.post2",
            "metadata": {},
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Message",
                "method": "message_response",
                "name": "message",
                "selected": "Message",
                "tool_mode": true,
                "types": [
                  "Message"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "template": {
              "_type": "Component",
              "input_value": {
                "_input_type": "MessageInput",
                "advanced": false,
                "display_name": "Text",
                "dynamic": false,
                "info": "Message to be passed as output.",
                "input_types": [
                  "Data",
                  "DataFrame",
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "input_value",
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "sender": {
                "_input_type": "DropdownInput",
                "advanced": true,
                "combobox": false,
                "display_name": "Sender Type",
                "dynamic": false,
                "info": "Type of sender.",
                "name": "sender",
                "options": [
                  "Machine",
                  "User"
                ],
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Machine"
              },
              "sender_name": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Sender Name",
                "dynamic": false,
                "info": "Name of the sender.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "sender_name",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": "Impact Realty Recruiter"
              },
              "session_id": {
                "_input_type": "MessageTextInput",
                "advanced": true,
                "display_name": "Session ID",
                "dynamic": false,
                "info": "The session ID of the chat.",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "load_from_db": false,
                "name": "session_id",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "should_store_message": {
                "_input_type": "BoolInput",
                "advanced": true,
                "display_name": "Store Messages",
                "dynamic": false,
                "info": "Store the message in the history.",
                "list": false,
                "name": "should_store_message",
                "placeholder": "",
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "bool",
                "value": true
              }
            },
            "tool_mode": false
          },
          "type": "ChatOutput"
        },
        "dragging": false,
        "height": 234,
        "id": "ChatOutput-pLrGd",
        "measured": {
          "height": 234,
          "width": 320
        },
        "position": {
          "x": 4100,
          "y": 200
        },
        "positionAbsolute": {
          "x": 4100,
          "y": 200
        },
        "selected": false,
        "type": "genericNode",
        "width": 320
      },
      {
        "data": {
          "id": "MCPTools-gqTOi",
          "node": {
            "base_classes": [
              "DataFrame"
            ],
            "beta": false,
            "category": "agents",
            "conditional_paths": [],
            "custom_fields": {},
            "description": "Connect to an MCP server to use its tools.",
            "display_name": "MCP Tools",
            "documentation": "https://docs.langflow.org/mcp-client",
            "edited": false,
            "field_order": [
              "mcp_server",
              "tool",
              "tool_placeholder"
            ],
            "frozen": false,
            "icon": "Mcp",
            "key": "MCPTools",
            "last_updated": "2025-09-28T03:31:32.133Z",
            "legacy": false,
            "metadata": {},
            "minimized": false,
            "output_types": [],
            "outputs": [
              {
                "allows_loop": false,
                "cache": true,
                "display_name": "Toolset",
                "group_outputs": false,
                "hidden": null,
                "method": "to_toolkit",
                "name": "component_as_tool",
                "options": null,
                "required_inputs": null,
                "selected": "Tool",
                "tool_mode": true,
                "types": [
                  "Tool"
                ],
                "value": "__UNDEFINED__"
              }
            ],
            "pinned": false,
            "score": 0.003932426697386162,
            "template": {
              "_type": "Component",
              "code": {
                "advanced": true,
                "dynamic": true,
                "fileTypes": [],
                "file_path": "",
                "info": "",
                "list": false,
                "load_from_db": false,
                "multiline": true,
                "name": "code",
                "password": false,
                "placeholder": "",
                "required": true,
                "show": true,
                "title_case": false,
                "type": "code",
                "value": "from __future__ import annotations\n\nimport asyncio\nimport uuid\nfrom typing import Any\n\nfrom langchain_core.tools import StructuredTool  # noqa: TC002\n\nfrom langflow.api.v2.mcp import get_server\nfrom langflow.base.agents.utils import maybe_unflatten_dict, safe_cache_get, safe_cache_set\nfrom langflow.base.mcp.util import (\n    MCPSseClient,\n    MCPStdioClient,\n    create_input_schema_from_json_schema,\n    update_tools,\n)\nfrom langflow.custom.custom_component.component_with_cache import ComponentWithCache\nfrom langflow.inputs.inputs import InputTypes  # noqa: TC001\nfrom langflow.io import DropdownInput, McpInput, MessageTextInput, Output\nfrom langflow.io.schema import flatten_schema, schema_to_langflow_inputs\nfrom langflow.logging import logger\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\nfrom langflow.services.auth.utils import create_user_longterm_token\n\n# Import get_server from the backend API\nfrom langflow.services.database.models.user.crud import get_user_by_id\nfrom langflow.services.deps import get_session, get_settings_service, get_storage_service\n\n\nclass MCPToolsComponent(ComponentWithCache):\n    schema_inputs: list = []\n    tools: list[StructuredTool] = []\n    _not_load_actions: bool = False\n    _tool_cache: dict = {}\n    _last_selected_server: str | None = None  # Cache for the last selected server\n\n    def __init__(self, **data) -> None:\n        super().__init__(**data)\n        # Initialize cache keys to avoid CacheMiss when accessing them\n        self._ensure_cache_structure()\n\n        # Initialize clients with access to the component cache\n        self.stdio_client: MCPStdioClient = MCPStdioClient(component_cache=self._shared_component_cache)\n        self.sse_client: MCPSseClient = MCPSseClient(component_cache=self._shared_component_cache)\n\n    def _ensure_cache_structure(self):\n        \"\"\"Ensure the cache has the required structure.\"\"\"\n        # Check if servers key exists and is not CacheMiss\n        servers_value = safe_cache_get(self._shared_component_cache, \"servers\")\n        if servers_value is None:\n            safe_cache_set(self._shared_component_cache, \"servers\", {})\n\n        # Check if last_selected_server key exists and is not CacheMiss\n        last_server_value = safe_cache_get(self._shared_component_cache, \"last_selected_server\")\n        if last_server_value is None:\n            safe_cache_set(self._shared_component_cache, \"last_selected_server\", \"\")\n\n    default_keys: list[str] = [\n        \"code\",\n        \"_type\",\n        \"tool_mode\",\n        \"tool_placeholder\",\n        \"mcp_server\",\n        \"tool\",\n    ]\n\n    display_name = \"MCP Tools\"\n    description = \"Connect to an MCP server to use its tools.\"\n    documentation: str = \"https://docs.langflow.org/mcp-client\"\n    icon = \"Mcp\"\n    name = \"MCPTools\"\n\n    inputs = [\n        McpInput(\n            name=\"mcp_server\",\n            display_name=\"MCP Server\",\n            info=\"Select the MCP Server that will be used by this component\",\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"tool\",\n            display_name=\"Tool\",\n            options=[],\n            value=\"\",\n            info=\"Select the tool to execute\",\n            show=False,\n            required=True,\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            info=\"Placeholder for the tool\",\n            value=\"\",\n            show=False,\n            tool_mode=False,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Response\", name=\"response\", method=\"build_output\"),\n    ]\n\n    async def _validate_schema_inputs(self, tool_obj) -> list[InputTypes]:\n        \"\"\"Validate and process schema inputs for a tool.\"\"\"\n        try:\n            if not tool_obj or not hasattr(tool_obj, \"args_schema\"):\n                msg = \"Invalid tool object or missing input schema\"\n                raise ValueError(msg)\n\n            flat_schema = flatten_schema(tool_obj.args_schema.schema())\n            input_schema = create_input_schema_from_json_schema(flat_schema)\n            if not input_schema:\n                msg = f\"Empty input schema for tool '{tool_obj.name}'\"\n                raise ValueError(msg)\n\n            schema_inputs = schema_to_langflow_inputs(input_schema)\n            if not schema_inputs:\n                msg = f\"No input parameters defined for tool '{tool_obj.name}'\"\n                logger.warning(msg)\n                return []\n\n        except Exception as e:\n            msg = f\"Error validating schema inputs: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n        else:\n            return schema_inputs\n\n    async def update_tool_list(self, mcp_server_value=None):\n        # Accepts mcp_server_value as dict {name, config} or uses self.mcp_server\n        mcp_server = mcp_server_value if mcp_server_value is not None else getattr(self, \"mcp_server\", None)\n        server_name = None\n        server_config_from_value = None\n        if isinstance(mcp_server, dict):\n            server_name = mcp_server.get(\"name\")\n            server_config_from_value = mcp_server.get(\"config\")\n        else:\n            server_name = mcp_server\n        if not server_name:\n            self.tools = []\n            return [], {\"name\": server_name, \"config\": server_config_from_value}\n\n        # Use shared cache if available\n        servers_cache = safe_cache_get(self._shared_component_cache, \"servers\", {})\n        cached = servers_cache.get(server_name) if isinstance(servers_cache, dict) else None\n\n        if cached is not None:\n            self.tools = cached[\"tools\"]\n            self.tool_names = cached[\"tool_names\"]\n            self._tool_cache = cached[\"tool_cache\"]\n            server_config_from_value = cached[\"config\"]\n            return self.tools, {\"name\": server_name, \"config\": server_config_from_value}\n\n        try:\n            async for db in get_session():\n                user_id, _ = await create_user_longterm_token(db)\n                current_user = await get_user_by_id(db, user_id)\n\n                # Try to get server config from DB/API\n                server_config = await get_server(\n                    server_name,\n                    current_user,\n                    db,\n                    storage_service=get_storage_service(),\n                    settings_service=get_settings_service(),\n                )\n\n                # If get_server returns empty but we have a config, use it\n                if not server_config and server_config_from_value:\n                    server_config = server_config_from_value\n\n                if not server_config:\n                    self.tools = []\n                    return [], {\"name\": server_name, \"config\": server_config}\n\n                _, tool_list, tool_cache = await update_tools(\n                    server_name=server_name,\n                    server_config=server_config,\n                    mcp_stdio_client=self.stdio_client,\n                    mcp_sse_client=self.sse_client,\n                )\n\n                self.tool_names = [tool.name for tool in tool_list if hasattr(tool, \"name\")]\n                self._tool_cache = tool_cache\n                self.tools = tool_list\n                # Cache the result using shared cache\n                cache_data = {\n                    \"tools\": tool_list,\n                    \"tool_names\": self.tool_names,\n                    \"tool_cache\": tool_cache,\n                    \"config\": server_config,\n                }\n\n                # Safely update the servers cache\n                current_servers_cache = safe_cache_get(self._shared_component_cache, \"servers\", {})\n                if isinstance(current_servers_cache, dict):\n                    current_servers_cache[server_name] = cache_data\n                    safe_cache_set(self._shared_component_cache, \"servers\", current_servers_cache)\n\n                return tool_list, {\"name\": server_name, \"config\": server_config}\n        except (TimeoutError, asyncio.TimeoutError) as e:\n            msg = f\"Timeout updating tool list: {e!s}\"\n            logger.exception(msg)\n            raise TimeoutError(msg) from e\n        except Exception as e:\n            msg = f\"Error updating tool list: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    async def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None) -> dict:\n        \"\"\"Toggle the visibility of connection-specific fields based on the selected mode.\"\"\"\n        try:\n            if field_name == \"tool\":\n                try:\n                    if len(self.tools) == 0:\n                        try:\n                            self.tools, build_config[\"mcp_server\"][\"value\"] = await self.update_tool_list()\n                            build_config[\"tool\"][\"options\"] = [tool.name for tool in self.tools]\n                            build_config[\"tool\"][\"placeholder\"] = \"Select a tool\"\n                        except (TimeoutError, asyncio.TimeoutError) as e:\n                            msg = f\"Timeout updating tool list: {e!s}\"\n                            logger.exception(msg)\n                            if not build_config[\"tools_metadata\"][\"show\"]:\n                                build_config[\"tool\"][\"show\"] = True\n                                build_config[\"tool\"][\"options\"] = []\n                                build_config[\"tool\"][\"value\"] = \"\"\n                                build_config[\"tool\"][\"placeholder\"] = \"Timeout on MCP server\"\n                            else:\n                                build_config[\"tool\"][\"show\"] = False\n                        except ValueError:\n                            if not build_config[\"tools_metadata\"][\"show\"]:\n                                build_config[\"tool\"][\"show\"] = True\n                                build_config[\"tool\"][\"options\"] = []\n                                build_config[\"tool\"][\"value\"] = \"\"\n                                build_config[\"tool\"][\"placeholder\"] = \"Error on MCP Server\"\n                            else:\n                                build_config[\"tool\"][\"show\"] = False\n\n                    if field_value == \"\":\n                        return build_config\n                    tool_obj = None\n                    for tool in self.tools:\n                        if tool.name == field_value:\n                            tool_obj = tool\n                            break\n                    if tool_obj is None:\n                        msg = f\"Tool {field_value} not found in available tools: {self.tools}\"\n                        logger.warning(msg)\n                        return build_config\n                    await self._update_tool_config(build_config, field_value)\n                except Exception as e:\n                    build_config[\"tool\"][\"options\"] = []\n                    msg = f\"Failed to update tools: {e!s}\"\n                    raise ValueError(msg) from e\n                else:\n                    return build_config\n            elif field_name == \"mcp_server\":\n                if not field_value:\n                    build_config[\"tool\"][\"show\"] = False\n                    build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"value\"] = \"\"\n                    build_config[\"tool\"][\"placeholder\"] = \"\"\n                    build_config[\"tool_placeholder\"][\"tool_mode\"] = False\n                    self.remove_non_default_keys(build_config)\n                    return build_config\n\n                build_config[\"tool_placeholder\"][\"tool_mode\"] = True\n\n                current_server_name = field_value.get(\"name\") if isinstance(field_value, dict) else field_value\n                _last_selected_server = safe_cache_get(self._shared_component_cache, \"last_selected_server\", \"\")\n\n                # To avoid unnecessary updates, only proceed if the server has actually changed\n                if (_last_selected_server in (current_server_name, \"\")) and build_config[\"tool\"][\"show\"]:\n                    return build_config\n\n                # Determine if \"Tool Mode\" is active by checking if the tool dropdown is hidden.\n                is_in_tool_mode = build_config[\"tools_metadata\"][\"show\"]\n                safe_cache_set(self._shared_component_cache, \"last_selected_server\", current_server_name)\n\n                # Check if tools are already cached for this server before clearing\n                cached_tools = None\n                if current_server_name:\n                    servers_cache = safe_cache_get(self._shared_component_cache, \"servers\", {})\n                    if isinstance(servers_cache, dict):\n                        cached = servers_cache.get(current_server_name)\n                        if cached is not None:\n                            cached_tools = cached[\"tools\"]\n                            self.tools = cached_tools\n                            self.tool_names = cached[\"tool_names\"]\n                            self._tool_cache = cached[\"tool_cache\"]\n\n                # Only clear tools if we don't have cached tools for the current server\n                if not cached_tools:\n                    self.tools = []  # Clear previous tools only if no cache\n\n                self.remove_non_default_keys(build_config)  # Clear previous tool inputs\n\n                # Only show the tool dropdown if not in tool_mode\n                if not is_in_tool_mode:\n                    build_config[\"tool\"][\"show\"] = True\n                    if cached_tools:\n                        # Use cached tools to populate options immediately\n                        build_config[\"tool\"][\"options\"] = [tool.name for tool in cached_tools]\n                        build_config[\"tool\"][\"placeholder\"] = \"Select a tool\"\n                    else:\n                        # Show loading state only when we need to fetch tools\n                        build_config[\"tool\"][\"placeholder\"] = \"Loading tools...\"\n                        build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"value\"] = uuid.uuid4()\n                else:\n                    # Keep the tool dropdown hidden if in tool_mode\n                    self._not_load_actions = True\n                    build_config[\"tool\"][\"show\"] = False\n\n            elif field_name == \"tool_mode\":\n                build_config[\"tool\"][\"placeholder\"] = \"\"\n                build_config[\"tool\"][\"show\"] = not bool(field_value) and bool(build_config[\"mcp_server\"])\n                self.remove_non_default_keys(build_config)\n                self.tool = build_config[\"tool\"][\"value\"]\n                if field_value:\n                    self._not_load_actions = True\n                else:\n                    build_config[\"tool\"][\"value\"] = uuid.uuid4()\n                    build_config[\"tool\"][\"options\"] = []\n                    build_config[\"tool\"][\"show\"] = True\n                    build_config[\"tool\"][\"placeholder\"] = \"Loading tools...\"\n            elif field_name == \"tools_metadata\":\n                self._not_load_actions = False\n\n        except Exception as e:\n            msg = f\"Error in update_build_config: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n        else:\n            return build_config\n\n    def get_inputs_for_all_tools(self, tools: list) -> dict:\n        \"\"\"Get input schemas for all tools.\"\"\"\n        inputs = {}\n        for tool in tools:\n            if not tool or not hasattr(tool, \"name\"):\n                continue\n            try:\n                flat_schema = flatten_schema(tool.args_schema.schema())\n                input_schema = create_input_schema_from_json_schema(flat_schema)\n                langflow_inputs = schema_to_langflow_inputs(input_schema)\n                inputs[tool.name] = langflow_inputs\n            except (AttributeError, ValueError, TypeError, KeyError) as e:\n                msg = f\"Error getting inputs for tool {getattr(tool, 'name', 'unknown')}: {e!s}\"\n                logger.exception(msg)\n                continue\n        return inputs\n\n    def remove_input_schema_from_build_config(\n        self, build_config: dict, tool_name: str, input_schema: dict[list[InputTypes], Any]\n    ):\n        \"\"\"Remove the input schema for the tool from the build config.\"\"\"\n        # Keep only schemas that don't belong to the current tool\n        input_schema = {k: v for k, v in input_schema.items() if k != tool_name}\n        # Remove all inputs from other tools\n        for value in input_schema.values():\n            for _input in value:\n                if _input.name in build_config:\n                    build_config.pop(_input.name)\n\n    def remove_non_default_keys(self, build_config: dict) -> None:\n        \"\"\"Remove non-default keys from the build config.\"\"\"\n        for key in list(build_config.keys()):\n            if key not in self.default_keys:\n                build_config.pop(key)\n\n    async def _update_tool_config(self, build_config: dict, tool_name: str) -> None:\n        \"\"\"Update tool configuration with proper error handling.\"\"\"\n        if not self.tools:\n            self.tools, build_config[\"mcp_server\"][\"value\"] = await self.update_tool_list()\n\n        if not tool_name:\n            return\n\n        tool_obj = next((tool for tool in self.tools if tool.name == tool_name), None)\n        if not tool_obj:\n            msg = f\"Tool {tool_name} not found in available tools: {self.tools}\"\n            self.remove_non_default_keys(build_config)\n            build_config[\"tool\"][\"value\"] = \"\"\n            logger.warning(msg)\n            return\n\n        try:\n            # Store current values before removing inputs\n            current_values = {}\n            for key, value in build_config.items():\n                if key not in self.default_keys and isinstance(value, dict) and \"value\" in value:\n                    current_values[key] = value[\"value\"]\n\n            # Get all tool inputs and remove old ones\n            input_schema_for_all_tools = self.get_inputs_for_all_tools(self.tools)\n            self.remove_input_schema_from_build_config(build_config, tool_name, input_schema_for_all_tools)\n\n            # Get and validate new inputs\n            self.schema_inputs = await self._validate_schema_inputs(tool_obj)\n            if not self.schema_inputs:\n                msg = f\"No input parameters to configure for tool '{tool_name}'\"\n                logger.info(msg)\n                return\n\n            # Add new inputs to build config\n            for schema_input in self.schema_inputs:\n                if not schema_input or not hasattr(schema_input, \"name\"):\n                    msg = \"Invalid schema input detected, skipping\"\n                    logger.warning(msg)\n                    continue\n\n                try:\n                    name = schema_input.name\n                    input_dict = schema_input.to_dict()\n                    input_dict.setdefault(\"value\", None)\n                    input_dict.setdefault(\"required\", True)\n\n                    build_config[name] = input_dict\n\n                    # Preserve existing value if the parameter name exists in current_values\n                    if name in current_values:\n                        build_config[name][\"value\"] = current_values[name]\n\n                except (AttributeError, KeyError, TypeError) as e:\n                    msg = f\"Error processing schema input {schema_input}: {e!s}\"\n                    logger.exception(msg)\n                    continue\n        except ValueError as e:\n            msg = f\"Schema validation error for tool {tool_name}: {e!s}\"\n            logger.exception(msg)\n            self.schema_inputs = []\n            return\n        except (AttributeError, KeyError, TypeError) as e:\n            msg = f\"Error updating tool config: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    async def build_output(self) -> DataFrame:\n        \"\"\"Build output with improved error handling and validation.\"\"\"\n        try:\n            self.tools, _ = await self.update_tool_list()\n            if self.tool != \"\":\n                # Set session context for persistent MCP sessions using Langflow session ID\n                session_context = self._get_session_context()\n                if session_context:\n                    self.stdio_client.set_session_context(session_context)\n                    self.sse_client.set_session_context(session_context)\n\n                exec_tool = self._tool_cache[self.tool]\n                tool_args = self.get_inputs_for_all_tools(self.tools)[self.tool]\n                kwargs = {}\n                for arg in tool_args:\n                    value = getattr(self, arg.name, None)\n                    if value:\n                        if isinstance(value, Message):\n                            kwargs[arg.name] = value.text\n                        else:\n                            kwargs[arg.name] = value\n\n                unflattened_kwargs = maybe_unflatten_dict(kwargs)\n\n                output = await exec_tool.coroutine(**unflattened_kwargs)\n\n                tool_content = []\n                for item in output.content:\n                    item_dict = item.model_dump()\n                    tool_content.append(item_dict)\n                return DataFrame(data=tool_content)\n            return DataFrame(data=[{\"error\": \"You must select a tool\"}])\n        except Exception as e:\n            msg = f\"Error in build_output: {e!s}\"\n            logger.exception(msg)\n            raise ValueError(msg) from e\n\n    def _get_session_context(self) -> str | None:\n        \"\"\"Get the Langflow session ID for MCP session caching.\"\"\"\n        # Try to get session ID from the component's execution context\n        if hasattr(self, \"graph\") and hasattr(self.graph, \"session_id\"):\n            session_id = self.graph.session_id\n            # Include server name to ensure different servers get different sessions\n            server_name = \"\"\n            mcp_server = getattr(self, \"mcp_server\", None)\n            if isinstance(mcp_server, dict):\n                server_name = mcp_server.get(\"name\", \"\")\n            elif mcp_server:\n                server_name = str(mcp_server)\n            return f\"{session_id}_{server_name}\" if session_id else None\n        return None\n\n    async def _get_tools(self):\n        \"\"\"Get cached tools or update if necessary.\"\"\"\n        mcp_server = getattr(self, \"mcp_server\", None)\n        if not self._not_load_actions:\n            tools, _ = await self.update_tool_list(mcp_server)\n            return tools\n        return []\n"
              },
              "mcp_server": {
                "_input_type": "McpInput",
                "advanced": false,
                "display_name": "MCP Server",
                "dynamic": false,
                "info": "Select the MCP Server that will be used by this component",
                "name": "mcp_server",
                "placeholder": "",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "trace_as_metadata": true,
                "type": "mcp",
                "value": {
                  "config": {},
                  "name": "connection"
                }
              },
              "tool": {
                "_input_type": "DropdownInput",
                "advanced": false,
                "combobox": false,
                "dialog_inputs": {},
                "display_name": "Tool",
                "dynamic": false,
                "info": "Select the tool to execute",
                "name": "tool",
                "options": [],
                "options_metadata": [],
                "placeholder": "",
                "real_time_refresh": true,
                "required": true,
                "show": false,
                "title_case": false,
                "toggle": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tool_placeholder": {
                "_input_type": "MessageTextInput",
                "advanced": false,
                "display_name": "Tool Placeholder",
                "dynamic": false,
                "info": "Placeholder for the tool",
                "input_types": [
                  "Message"
                ],
                "list": false,
                "list_add_label": "Add More",
                "load_from_db": false,
                "name": "tool_placeholder",
                "placeholder": "",
                "required": false,
                "show": false,
                "title_case": false,
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "type": "str",
                "value": ""
              },
              "tools_metadata": {
                "_input_type": "ToolsInput",
                "advanced": false,
                "display_name": "Actions",
                "dynamic": false,
                "info": "Modify tool names and descriptions to help agents understand when to use each tool.",
                "is_list": true,
                "list_add_label": "Add More",
                "name": "tools_metadata",
                "placeholder": "Loading actions...",
                "real_time_refresh": true,
                "required": false,
                "show": true,
                "title_case": false,
                "tool_mode": false,
                "trace_as_metadata": true,
                "type": "tools",
                "value": []
              }
            },
            "tool_mode": true
          },
          "showNode": true,
          "type": "MCPTools"
        },
        "dragging": false,
        "id": "MCPTools-gqTOi",
        "measured": {
          "height": 286,
          "width": 320
        },
        "position": {
          "x": 894.9911971830985,
          "y": 704.3632629107982
        },
        "selected": true,
        "type": "genericNode"
      }
    ],
    "viewport": {
      "x": 30.703703703703695,
      "y": 129.96257716049382,
      "zoom": 0.26296296296296295
    }
  },
  "description": "Impact Realty Recruiting Agent - Complete production-ready recruiting automation with CSV ingestion, validation, intelligent outreach via SMS/Email/Calendar, response routing, CRM operations, retry logic, and comprehensive logging.",
  "endpoint_name": "impact-realty-recruiting-flow",
  "id": "33560fe6-ea0e-456d-af02-8a11782d0a33",
  "is_component": false,
  "last_tested_version": "1.5.1",
  "name": "Impact Realty Recruiting Agent",
  "tags": [
    "recruiting",
    "impact-realty",
    "sms",
    "email",
    "crm",
    "retry-logic",
    "postgresql",
    "native-components",
    "salesmsg"
  ]
}